{"version":3,"sources":["components/Search.jsx","components/Result.jsx","components/Results.jsx","components/Popup.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","perspective","scale","e","target","value","prevState","axios","then","data","id","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAgBeA,MAdf,YAA2C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC/B,OACC,6BAASC,UAAU,kBAClB,2BACCC,KAAK,OACLC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,MCIDM,MAZf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACzB,OACC,yBAAKP,UAAU,wCACdQ,QAAS,kBAAMD,EAAUD,EAAOG,UAChC,yBAAKC,IACJJ,EAAOK,SAHT,IAKI,gCAAML,EAAOM,MAAb,OCKSC,MAVf,YAA2C,IAAvBC,EAAsB,EAAtBA,QAASP,EAAa,EAAbA,UAC5B,OACC,6BAASP,UAAU,WACjBc,EAAQC,KAAI,SAAAT,GAAM,OAClB,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCU5CU,MAhBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC1B,OACC,6BAASnB,UAAU,SAClB,yBAAKA,UAAU,WACd,4BAAMkB,EAASN,MAAf,IAAuB,kCAASM,EAASE,KAAlB,MACvB,uBAAGpB,UAAU,UAAb,WAA+BkB,EAASG,YACxC,yBAAKrB,UAAU,QACd,yBAAKU,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEd,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,YCqGWI,MAxGf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KAMPC,EAAS,2CAwDf,OAAQ,yBAAK5B,UAAU,OACrB,gCACE,kBAAC,IAAD,CACEA,UAAU,8BACV6B,YAAa,IACbC,MAAO,MAEP,yBAAK9B,UAAU,iBACb,uCACA,2CACA,gDAIN,8BACE,kBAAC,EAAD,CAAQF,YApDQ,SAACiC,GACnB,IAAIN,EAAIM,EAAEC,OAAOC,MAEjBN,GAAS,SAAAO,GACP,OAAO,2BACFA,GADL,IAEET,EAAGA,QAiDH1B,OAxES,SAACgC,GACA,UAAVA,EAAEf,KACJmB,IAAMP,EAAS,MAAQF,EAAMD,GAAGW,MAAK,YAE9B,IACDtB,EADA,EADJuB,KAEmBxC,OAEnB8B,GAAS,SAAAO,GACP,OAAO,2BACFA,GADL,IAEEpB,QAASA,aAmEf,kBAAC,EAAD,CAASA,QACPY,EAAMZ,QAENP,UApDY,SAAA+B,GAChBH,IAAMP,EAAS,MAAQU,GAAIF,MAAK,YAEzB,IACD9B,EADA,EADJ+B,KAIAE,QAAQC,IAAIlC,GAEZqB,GAAS,SAAAO,GACP,OAAO,2BACFA,GADL,IAEEhB,SAAUZ,aA6BhB,IAgBoC,oBAAxBoB,EAAMR,SAASN,OAAwB,kBAAE,EAAF,CAAQM,SACrDQ,EAAMR,SAENC,WA1CW,WACjBQ,GAAS,SAAAO,GACP,OAAO,2BACFA,GADL,IAEEhB,SAAU,cCtDEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.dc8fc152.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({ handleInput, search }) {\r\n\treturn (\r\n\t\t<section className=\"searchbox-wrap\">\r\n\t\t\t<input \r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tplaceholder=\"Search for a movie...\" \r\n\t\t\t\tclassName=\"searchbox\" \r\n\t\t\t\tonChange={handleInput}\r\n\t\t\t\tonKeyPress={search}\r\n\t\t\t/>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction Result({ result, openPopup }) {\r\n\treturn (\r\n\t\t<div className=\"result br3 grow shadow-5 b--white-70 \"\r\n\t\t\tonClick={() => openPopup(result.imdbID)} >\r\n\t\t\t<img src={\r\n\t\t\t\tresult.Poster\r\n\t\t\t}\r\n\t\t\t/> <h3> {result.Title} </h3>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Result","import React from 'react'\r\n\r\nimport Result from './Result'\r\n\r\nfunction Results ({ results, openPopup }) {\r\n\treturn (\r\n\t\t<section className=\"results\">\r\n\t\t\t{results.map(result => (\r\n\t\t\t\t<Result key={result.imdbID} result={result} openPopup={openPopup} />\r\n\t\t\t))}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n\treturn (\r\n\t\t<section className=\"popup\">\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\r\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n\t\t\t\t<div className=\"plot\">\r\n\t\t\t\t\t<img src={selected.Poster} />\r\n\t\t\t\t\t<p>{selected.Plot}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Popup\r\n","import React, {\r\n  useState\r\n} from 'react'\r\nimport axios from 'axios'\r\nimport Tilt from 'react-parallax-tilt';\r\nimport Search from './components/Search'\r\nimport Results from './components/Results'\r\nimport Popup from './components/Popup'\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    s: \"\",\r\n    results: [],\r\n    selected: {}\r\n  });\r\n  const apiurl = \"https://www.omdbapi.com/?apikey=dfe6d885\";\r\n\r\n  const search = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      axios(apiurl + \"&s=\" + state.s).then(({\r\n        data\r\n      }) => {\r\n        let results = data.Search;\r\n\r\n        setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            results: results\r\n          }\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleInput = (e) => {\r\n    let s = e.target.value;\r\n\r\n    setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        s: s\r\n      }\r\n    });\r\n  }\r\n\r\n  const openPopup = id => {\r\n    axios(apiurl + \"&i=\" + id).then(({\r\n      data\r\n    }) => {\r\n      let result = data;\r\n\r\n      console.log(result);\r\n\r\n      setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          selected: result\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  const closePopup = () => {\r\n    setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        selected: {}\r\n      }\r\n    });\r\n  }\r\n\r\n  return (<div className=\"App\" >\r\n    <header >\r\n      <Tilt\r\n        className=\"parallax-effect-glare-scale\"\r\n        perspective={650}\r\n        scale={1.02}\r\n      >\r\n        <div className=\"inner-element\">\r\n          <div>Search</div>\r\n          <div>for movies</div>\r\n          <div>ðŸ‘€</div>\r\n        </div>\r\n      </Tilt>\r\n    </header >\r\n    <main >\r\n      <Search handleInput={\r\n        handleInput\r\n      }\r\n        search={\r\n          search\r\n        }\r\n      />\r\n\r\n      <Results results={\r\n        state.results\r\n      }\r\n        openPopup={\r\n          openPopup\r\n        }\r\n      /> {\r\n        (typeof state.selected.Title != \"undefined\") ? < Popup selected={\r\n          state.selected\r\n        }\r\n          closePopup={\r\n            closePopup\r\n          }\r\n        /> : false}\r\n    </main >\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}